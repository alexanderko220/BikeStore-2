// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bikeStore.Data;

namespace BikeStore.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20200510091234_db_changes#2")]
    partial class db_changes2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikeStore.Data.Entities.BikesColors", b =>
                {
                    b.Property<long>("BikeId");

                    b.Property<long>("ColorId");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("SizeId");

                    b.HasKey("BikeId", "ColorId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.ToTable("BikesColors");
                });

            modelBuilder.Entity("BikeStore.Data.Entities.BikesSizes", b =>
                {
                    b.Property<long>("BikeId");

                    b.Property<long>("SizeId");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("BikeId", "SizeId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SizeId");

                    b.ToTable("BikesSizes");
                });

            modelBuilder.Entity("BikeStore.Data.Entities.Color", b =>
                {
                    b.Property<long>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName");

                    b.Property<string>("ColorValue");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("BikeStore.Data.Entities.Size", b =>
                {
                    b.Property<long?>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SizeName");

                    b.Property<string>("SizeValue");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.Bike", b =>
                {
                    b.Property<long>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasMaxLength(100);

                    b.Property<long>("CategoryId");

                    b.Property<long?>("ImagesStoreImgId");

                    b.Property<long>("ImgId");

                    b.Property<bool>("IsInStock");

                    b.Property<string>("Model")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ThumbBase64");

                    b.HasKey("BikeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImagesStoreImgId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.BikesSpecifications", b =>
                {
                    b.Property<long>("BikeId");

                    b.Property<long>("SpecificationId");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("BikeId", "SpecificationId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SpecificationId");

                    b.ToTable("BikesSpecifications");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.Category", b =>
                {
                    b.Property<long>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatDescr");

                    b.Property<string>("CatName");

                    b.Property<bool>("IsCategoryActive");

                    b.Property<long?>("MainCatId");

                    b.HasKey("CatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.ImgContent", b =>
                {
                    b.Property<long>("ImgContentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content");

                    b.Property<string>("ImgContentMimeType");

                    b.Property<string>("ImgContentName");

                    b.Property<DateTime?>("ImgCreateDt");

                    b.Property<bool>("IsThumbnail");

                    b.Property<long>("StoreImgId");

                    b.HasKey("ImgContentId");

                    b.HasIndex("StoreImgId");

                    b.ToTable("ImgContent");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.Specification", b =>
                {
                    b.Property<long>("SpecId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("Description");

                    b.Property<string>("Model");

                    b.Property<long>("SpecCatId");

                    b.Property<string>("Type");

                    b.HasKey("SpecId");

                    b.HasIndex("SpecCatId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.SpecificationCategory", b =>
                {
                    b.Property<long>("SpecCatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSpecCatActive");

                    b.Property<string>("SpecCatName");

                    b.HasKey("SpecCatId");

                    b.ToTable("SpecificationCategory");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.StoreImages", b =>
                {
                    b.Property<long>("StoreImgId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("StoreImgId");

                    b.ToTable("StoreImages");
                });

            modelBuilder.Entity("BikeStore.Data.Entities.BikesColors", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.Bike", "Bike")
                        .WithMany("Colors")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BikeStore.Data.Entities.Color", "Color")
                        .WithMany("BikesColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BikeStore.Data.Entities.Size")
                        .WithMany("BikesSizes")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("BikeStore.Data.Entities.BikesSizes", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.Bike", "Bike")
                        .WithMany("Sizes")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BikeStore.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bikeStore.Data.Entities.Bike", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.Category", "Category")
                        .WithMany("Bikes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bikeStore.Data.Entities.StoreImages", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesStoreImgId");
                });

            modelBuilder.Entity("bikeStore.Data.Entities.BikesSpecifications", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.Bike", "Bike")
                        .WithMany("Specifications")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bikeStore.Data.Entities.Specification", "Specification")
                        .WithMany("BikesSpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bikeStore.Data.Entities.ImgContent", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.StoreImages", "StoreImages")
                        .WithMany("ImgContents")
                        .HasForeignKey("StoreImgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bikeStore.Data.Entities.Specification", b =>
                {
                    b.HasOne("bikeStore.Data.Entities.SpecificationCategory", "SpecCategory")
                        .WithMany("Specifications")
                        .HasForeignKey("SpecCatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
